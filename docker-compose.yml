services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - traefik
      - spotfest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rabbitmq.rule=Host(`${DOMAIN}`) && PathPrefix(`/dash`)"
      - "traefik.http.routers.rabbitmq.entrypoints=websecure"
      - "traefik.http.routers.rabbitmq.tls=true"
      - "traefik.http.routers.rabbitmq.tls.certresolver=myresolver"
      # Route dashboard
      - "traefik.http.services.rabbitmq.loadbalancer.server.port=15672"
      - "traefik.http.routers.rabbitmq.middlewares=strip-dash"
      - "traefik.http.middlewares.strip-dash.stripprefix.prefixes=/dash"
    environment:
    # from .env
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}

  spotfest-db:
    container_name: spotfest-db
    image: mysql:8.0
    restart: always
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - spotfest-db_data:/var/lib/mysql
    networks:
      - spotfest
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  informationservice:
    container_name: informationservice
    depends_on:
      spotfest-db:
        condition: service_healthy
    build:
      context: .
      dockerfile: InformationService/Dockerfile
    networks:
      - traefik
      - spotfest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.happening.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/info`)"
      - "traefik.http.routers.happening.entrypoints=websecure"
      - "traefik.http.routers.happening.tls=true"
      - "traefik.http.routers.happening.tls.certresolver=myresolver"
      - "traefik.http.services.happening.loadbalancer.server.port=8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Server=spotfest-db;Database=${MYSQL_DATABASE};User=${MYSQL_USER};Password=${MYSQL_PASSWORD}"
      MAIL_SMTPSERVER: ${MAIL_SMTPSERVER}
      MAIL_PORT: ${MAIL_PORT}
      MAIL_SENDER: ${MAIL_SENDER}
      MAIL_CLIENT_ID: ${MAIL_CLIENT_ID}
      MAIL_TENANT_ID: ${MAIL_TENANT_ID}
      MAIL_SECRET: ${MAIL_SECRET}
      MAIL_SCOPES: ${MAIL_SCOPES}
      
  happeningservice:
    container_name: happeningservice
    depends_on:
      rabbitmq:
        condition: service_healthy
      spotfest-db:
        condition: service_healthy
    build:
      context: .
      dockerfile: HappeningService/Dockerfile
    networks:
      - traefik
      - spotfest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.happening.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/happening`)"
      - "traefik.http.routers.happening.entrypoints=websecure"
      - "traefik.http.routers.happening.tls=true"
      - "traefik.http.routers.happening.tls.certresolver=myresolver"
      - "traefik.http.services.happening.loadbalancer.server.port=8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Server=spotfest-db;Database=${MYSQL_DATABASE};User=${MYSQL_USER};Password=${MYSQL_PASSWORD}"  
      RabbitMQ__HostName: rabbitmq
      RabbitMQ__UserName: ${RABBITMQ_DEFAULT_USER}
      RabbitMQ__Password: ${RABBITMQ_DEFAULT_PASS}

  artistservice:
    container_name: artistservice
    depends_on:
      rabbitmq:
        condition: service_healthy
      spotfest-db:
        condition: service_healthy
    build:
      context: .
      dockerfile: ArtistService/Dockerfile
    networks:
      - traefik
      - spotfest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.artist.rule=Host(`${DOMAIN}`) && PathPrefix(`/api/artist`)"
      - "traefik.http.routers.artist.entrypoints=websecure"
      - "traefik.http.routers.artist.tls=true"
      - "traefik.http.routers.artist.tls.certresolver=myresolver"
      - "traefik.http.services.artist.loadbalancer.server.port=8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Server=spotfest-db;Database=${MYSQL_DATABASE};User=${MYSQL_USER};Password=${MYSQL_PASSWORD}"  
      RabbitMQ__HostName: rabbitmq
      RabbitMQ__UserName: ${RABBITMQ_DEFAULT_USER}
      RabbitMQ__Password: ${RABBITMQ_DEFAULT_PASS}

  dataharvester:
    container_name: dataharvester
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: DataHarvester/Dockerfile
    networks:
      - traefik
      - spotfest
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dataharvester.rule=Host(`${DOMAIN}`) && PathPrefix(`/artistsearch`)"
      - "traefik.http.routers.dataharvester.entrypoints=websecure"
      - "traefik.http.routers.dataharvester.tls=true"
      - "traefik.http.routers.dataharvester.tls.certresolver=myresolver"
      - "traefik.http.services.dataharvester.loadbalancer.server.port=8080"
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      RabbitMQ__HostName: rabbitmq
      RabbitMQ__UserName: ${RABBITMQ_DEFAULT_USER}
      RabbitMQ__Password: ${RABBITMQ_DEFAULT_PASS}
      SpotifyAPIClientId: ${SPOTIFY_API_CLIENT_ID}
      SpotifyAPIClientSecret: ${SPOTIFY_API_CLIENT_SECRET}

  jobscheduler:
    container_name: jobscheduler
    build:
      context: .
      dockerfile: JobScheduler/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      spotfest-db:
        condition: service_healthy
    networks:
      - spotfest
    environment:
      ASPNETCORE_ENVIRONMENT: Production
      ConnectionStrings__DefaultConnection: "Server=spotfest-db;Database=${MYSQL_DATABASE};User=${MYSQL_USER};Password=${MYSQL_PASSWORD}"  
      RabbitMQ__HostName: rabbitmq
      RabbitMQ__UserName: ${RABBITMQ_DEFAULT_USER}
      RabbitMQ__Password: ${RABBITMQ_DEFAULT_PASS}

  frontend:
    container_name: frontend
    build: ./Frontend
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

volumes:
  spotfest-db_data:
  rabbitmq_data:

networks:
  traefik:
    external: true
  spotfest:
    driver: bridge
